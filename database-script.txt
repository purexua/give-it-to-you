DROP DATABASE IF EXISTS give_it_to_you_plus;

#创建数据库 give_it_to_you_plus
CREATE DATABASE give_it_to_you_plus;

#使用数据库
USE give_it_to_you_plus;

#创建 用户表(user)
CREATE TABLE user
(
    user_id       INT PRIMARY KEY AUTO_INCREMENT,
    user_name     VARCHAR(255) NOT NULL,
    password      VARCHAR(255) NOT NULL,
    real_name     VARCHAR(255) NOT NULL,
    id_card       VARCHAR(255),
    email         VARCHAR(100),
    address       VARCHAR(255),
    phone_number  VARCHAR(20),
    health_status VARCHAR(20)    DEFAULT 'Good',   -- Good, Fair, Poor
    credit_status VARCHAR(20)    DEFAULT 'Fair',   -- Good, Fair, Poor
    role          VARCHAR(20)    DEFAULT 'Client', -- Client, Admin
    wallet        DECIMAL(10, 2) DEFAULT 0,
    register_time TIMESTAMP      DEFAULT CURRENT_TIMESTAMP,
    deleted       INT            DEFAULT 0,
    version       INT            DEFAULT 1
);

INSERT INTO user (user_name, password, real_name, id_card, email, address, phone_number, role, wallet)
VALUES ('purexu', '123456', 'xjh', '123456789012345678', '', '', '', 'Client', 1000000),
       ('admin', '123456', 'admin', '123456789012345678', '', '', '', 'Admin', 1000000);

#创建 产品利率表 (Product_Interest_Rate)
CREATE TABLE product_interest_rate
(
    rate_id             INT PRIMARY KEY AUTO_INCREMENT,
    product_type        VARCHAR(50)  DEFAULT 'Personal Loan',
    term                INT,
    interest_rate       DECIMAL(5, 2),-- 单位：% 范围：0-100.00
    loan_amount         DECIMAL(10, 2),-- 单位：yuan
    product_description VARCHAR(255) DEFAULT 'No product description available',-- 产品描述
    CHECK ( interest_rate >= 0 AND interest_rate <= 100 AND loan_amount >= 0 )
);

INSERT INTO product_interest_rate (product_type, term, interest_rate, loan_amount, product_description)
VALUES ('A-6', 15, 6, 500, 'purexu 大帅哥'),
       ('A-12', 30, 8, 2000, 'purexu 大帅哥'),
       ('A-24', 45, 10, 5000, 'purexu 大帅哥'),
       ('A-24-vip', 90, 0, 5000, 'purexu 大帅哥'),
       ('B-6', 6, 15, 2000, 'purexu 大帅哥'),
       ('B-12', 12, 30, 5000, 'purexu 大帅哥'),
       ('B-24', 24, 45, 10000, 'purexu 大帅哥'),
       ('B-24-vip', 90, 0, 10000, 'purexu 大帅哥'),
       ('C-6', 6, 15, 5000, 'purexu 大帅哥'),
       ('C-12', 12, 30, 10000, 'purexu 大帅哥'),
       ('C-24', 24, 45, 20000, 'purexu 大帅哥'),
       ('C-24-vip', 90, 0, 20000, 'purexu 大帅哥'),
       ('D-6', 6, 15, 10000, 'purexu 大帅哥'),
       ('D-12', 12, 30, 20000, 'purexu 大帅哥'),
       ('D-24', 24, 45, 50000, 'purexu 大帅哥'),
       ('D-24-vip', 90, 0, 50000, 'purexu 大帅哥');

#创建 贷款申请表(Loan_Application)
CREATE TABLE loan_application
(
    application_id   INT PRIMARY KEY AUTO_INCREMENT,
    user_id          INT,
    loan_type        VARCHAR(255),
    term             INT,
    requested_amount DECIMAL(10, 2),
    interest_rate    DECIMAL(5, 2),
    application_time TIMESTAMP   DEFAULT CURRENT_TIMESTAMP,
    approval_time    TIMESTAMP,
    status           VARCHAR(50) DEFAULT 'Pending', -- Pending, Approved, Rejected
    FOREIGN KEY (user_id) REFERENCES user (user_id),
    CHECK ( requested_amount >= 0 AND interest_rate >= 0 AND interest_rate <= 100 )
);

#创建 还款计划表(Repayment_Plan)
CREATE TABLE repayment_plan
(
    plan_id         INT PRIMARY KEY AUTO_INCREMENT,
    user_id         INT,
    application_id  INT,
    term            INT,                                 -- 总期数
    current_term    INT       DEFAULT 1,                 -- 当前期数
    due_amount      DECIMAL(10, 2),                      -- 应还金额
    total_amount    DECIMAL(10, 2),                      -- 总金额
    plan_start_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- 计划开始时间
    is_paid         INT       DEFAULT 0,                 -- 0: Not Paid, 1: Paid
    FOREIGN KEY (user_id) REFERENCES user (user_id),
    FOREIGN KEY (application_id) REFERENCES loan_application (application_id),
    CHECK ( due_amount >= 0 AND total_amount >= 0 AND current_term >= 0 AND current_term <= term )
);

#创建 还款记录表(Repayment_Record)
CREATE TABLE repayment_record
(
    record_id      INT PRIMARY KEY AUTO_INCREMENT,
    user_id        INT,
    plan_id        INT,
    payment_time   TIMESTAMP,                    -- 还款时间
    payment_amount DECIMAL(10, 2),               -- 还款金额
    payment_method VARCHAR(50) DEFAULT 'Wallet', -- Wallet, Alipay, Wechat
    FOREIGN KEY (user_id) REFERENCES user (user_id),
    FOREIGN KEY (plan_id) REFERENCES repayment_plan (plan_id),
    CHECK ( payment_amount >= 0 )
);

#创建 用户信用评分表(Credit_Score)
CREATE TABLE credit_score
(
    score_id           INT PRIMARY KEY AUTO_INCREMENT,
    user_id            INT,
    credit_score       INT            DEFAULT 500,       -- 信用分数
    limit_amount       DECIMAL(10, 2) DEFAULT 10000,     -- 信用额度
    monthly_income     DECIMAL(10, 2) DEFAULT 0,-- 月收入
    expenses           DECIMAL(10, 2) DEFAULT 0,-- 月支出
    employment_status  VARCHAR(50)    DEFAULT 'Employed',-- Employed, Unemployed, Retired  在职，失业，退休
    job_duration       INT            DEFAULT 0,
    education_level    VARCHAR(50)    DEFAULT 'Bachelor',-- Bachelor, Master, Doctor  学士，硕士，博士
    overdue_records    INT            DEFAULT 0,-- 逾期记录数
    assets_value       DECIMAL(15, 2) DEFAULT 0,-- 资产价值
    social_connections INT            DEFAULT 0,-- 社会关系
    legal_disputes     INT            DEFAULT 0,-- 法律纠纷数
    behavior_analysis  VARCHAR(255)   DEFAULT 'Stable',-- Stable, Unstable 稳定，不稳定
    FOREIGN KEY (user_id) REFERENCES user (user_id)
);

INSERT INTO Credit_Score (user_id,
                          credit_score,
                          limit_amount,
                          monthly_income,
                          expenses,
                          employment_status,
                          job_duration,
                          education_level,
                          overdue_records,
                          assets_value,
                          social_connections,
                          legal_disputes,
                          behavior_analysis)
    VALUE (1, 750, 5000.00, 5000.00, 3000.00, 'Employed', 3, 'Bachelor', 0, 150000.00, 300, 1, 'Stable');

#创建 系统日志表 (System_Log)
CREATE TABLE system_log
(
    log_id   INT PRIMARY KEY AUTO_INCREMENT,
    user_id  INT,
    log_date TIMESTAMP,
    action   VARCHAR(255),
    FOREIGN KEY (user_id) REFERENCES user (user_id)
);

